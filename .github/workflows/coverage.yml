name: Code Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  coverage:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.4
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: dataservices2
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        extensions: mbstring, dom, fileinfo, mysql, gd, redis, memcached
        coverage: xdebug

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'

    - name: Get Composer Cache Directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache Composer dependencies
      uses: actions/cache@v4
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Install Composer dependencies
      run: composer install --no-interaction --prefer-dist --optimize-autoloader

    - name: Install NPM dependencies
      run: npm ci

    - name: Build assets
      run: npm run build

    - name: Setup environment file
      run: |
        cp .env.example .env
        php artisan key:generate

    - name: Run migrations
      run: php artisan migrate --force
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: dataservices2
        DB_USERNAME: root
        DB_PASSWORD: ''

    - name: Clear application cache
      run: |
        php artisan config:clear
        php artisan cache:clear

    - name: Run tests with coverage
      run: ./vendor/bin/pest --coverage --coverage-clover=coverage.xml --coverage-html=coverage-html
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: dataservices2
        DB_USERNAME: root
        DB_PASSWORD: ''

    - name: Generate coverage badge
      run: |
        # Extract coverage percentage from coverage.xml
        COVERAGE=$(php -r "
          \$xml = simplexml_load_file('coverage.xml');
          \$metrics = \$xml->project->metrics;
          \$statements = (float) \$metrics['statements'];
          \$coveredstatements = (float) \$metrics['coveredstatements'];
          \$coverage = (\$statements > 0) ? (\$coveredstatements / \$statements) * 100 : 0;
          echo number_format(\$coverage, 1);
        ")
        
        echo "Coverage: $COVERAGE%"
        
        # Determine badge color based on coverage percentage
        if (( $(echo "$COVERAGE >= 90" | bc -l) )); then
          COLOR="brightgreen"
        elif (( $(echo "$COVERAGE >= 80" | bc -l) )); then
          COLOR="green"  
        elif (( $(echo "$COVERAGE >= 70" | bc -l) )); then
          COLOR="yellowgreen"
        elif (( $(echo "$COVERAGE >= 60" | bc -l) )); then
          COLOR="yellow"
        elif (( $(echo "$COVERAGE >= 50" | bc -l) )); then
          COLOR="orange"
        else
          COLOR="red"
        fi
        
        # Create badge JSON
        cat > coverage-badge.json << EOF
        {
          "schemaVersion": 1,
          "label": "coverage",
          "message": "${COVERAGE}%",
          "color": "${COLOR}"
        }
        EOF
        
        echo "COVERAGE_PERCENTAGE=$COVERAGE" >> $GITHUB_ENV
        echo "BADGE_COLOR=$COLOR" >> $GITHUB_ENV

    #- name: Upload coverage to Codecov
    #  uses: codecov/codecov-action@v4
    #  with:
    #    file: ./coverage.xml
    #    flags: unittests
    #    name: codecov-umbrella
    #    fail_ci_if_error: false
    #  env:
    #    CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    - name: Update coverage badge in Gist
      if: github.ref == 'refs/heads/main'
      run: |
        # Update coverage badge in GitHub Gist
        curl -X PATCH \
          -H "Authorization: token ${{ secrets.GIST_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/gists/${{ secrets.GIST_ID }} \
          -d '{
            "files": {
              "coverage-badge.json": {
                "content": "{\n  \"schemaVersion\": 1,\n  \"label\": \"coverage\",\n  \"message\": \"'${{ env.COVERAGE_PERCENTAGE }}%\",\n  \"color\": \"'${{ env.BADGE_COLOR }}'\"\n}"
              }
            }
          }'

    - name: Upload coverage HTML report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-html-report
        path: coverage-html/
        retention-days: 30

    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const coverage = '${{ env.COVERAGE_PERCENTAGE }}';
          const color = '${{ env.BADGE_COLOR }}';
          const emoji = coverage >= 90 ? '🎉' : coverage >= 80 ? '✅' : coverage >= 70 ? '⚠️' : '❌';
          
          const comment = `## ${emoji} Code Coverage Report
          
          **Current Coverage:** ${coverage}%
          
          ![Coverage](https://img.shields.io/badge/coverage-${coverage}%25-${color})
          
          ### Coverage Details
          - **Status:** ${coverage >= 80 ? 'Good' : coverage >= 60 ? 'Needs Improvement' : 'Poor'}
          - **Target:** 80%
          
          ${coverage < 80 ? '⚠️ **Warning:** Coverage is below the recommended 80% threshold.' : ''}
          
          📊 [View detailed coverage report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    - name: Coverage Gate
      run: |
        COVERAGE=${{ env.COVERAGE_PERCENTAGE }}
        MINIMUM_COVERAGE=70
        
        echo "Current coverage: $COVERAGE%"
        echo "Minimum required: $MINIMUM_COVERAGE%"
        
        if (( $(echo "$COVERAGE < $MINIMUM_COVERAGE" | bc -l) )); then
          echo "❌ Coverage is below minimum threshold of $MINIMUM_COVERAGE%"
          echo "Please add more tests to improve coverage."
          exit 1
        else
          echo "✅ Coverage meets minimum threshold"
        fi